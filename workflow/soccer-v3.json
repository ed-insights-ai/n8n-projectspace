{
  "name": "Soccer Analytics V3 - Complete Pipeline",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "manual-trigger-v3",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [280, 300]
    },
    {
      "parameters": {
        "url": "https://api.firecrawl.dev/v0/scrape",
        "method": "POST",
        "sendBody": true,
        "sendHeaders": true,
        "authentication": "genericCredentialType",
        "bodyParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "https://static.hardingsports.com/custompages/msoc/2024/roster.htm"
            },
            {
              "name": "pageOptions",
              "value": "={{ { onlyMainContent: true, replaceAllPathsWithAbsolutePaths: true, removeTags: 'img,svg,video,audio' } }}"
            }
          ]
        },
        "genericAuthType": "httpHeaderAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "timeout": 120000
        }
      },
      "id": "firecrawl-scrape-v3",
      "name": "Firecrawl Scrape",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [480, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "GOqSDTQhXfgtBNAV",
          "name": "Firecrawl API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.success }}",
              "rightValue": ""
            }
          ]
        }
      },
      "id": "scrape-success-check",
      "name": "Scrape Success?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// V3 Soccer Data Processing with Database Preparation\nconst scrapedData = $json.data;\nconst markdown = scrapedData.markdown || '';\nconst metadata = scrapedData.metadata || {};\n\n// Parse soccer data from markdown content\nconst lines = markdown.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n\n// Debug: Log first 20 lines to understand structure\nconsole.log('First 20 lines of markdown:');\nlines.slice(0, 20).forEach((line, i) => {\n  console.log(`${i+1}: ${line}`);\n});\n\n// Debug: Look for sections with player or roster data\nlines.forEach((line, i) => {\n  if (line.toLowerCase().includes('roster') || line.toLowerCase().includes('player') || line.toLowerCase().includes('individual')) {\n    console.log(`Section found at line ${i+1}: ${line}`);\n    // Log surrounding lines for context\n    for (let j = Math.max(0, i-2); j <= Math.min(lines.length-1, i+10); j++) {\n      console.log(`  ${j+1}: ${lines[j]}`);\n    }\n  }\n});\n\n// Initialize data structures\nconst players = [];\nconst games = [];\nconst playerGameStats = [];\n\n// Parse player roster from Individual Game-by-Game section\nlines.forEach((line, index) => {\n  // Debug: Log ALL lines that contain numbers to see actual format\n  if (line.match(/\\d+/)) {\n    console.log(`Line ${index+1}: ${line}`);\n  }\n  \n  // Look for multiple player roster patterns with improved regex:\n  // Pattern 1: \"| # 1 | [Inigo Chavarria]\" or \"| #24 | [Elliott Bracy]\"\n  let playerMatch = line.match(/\\|\\s*#?\\s*(\\d{1,2})\\s*\\|\\s*\\[([^\\]]+)\\]/);\n  \n  // Pattern 2: \"#1 Player Name\" format (must have actual letters)\n  if (!playerMatch) {\n    playerMatch = line.match(/#(\\d{1,2})\\s+([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)/);\n  }\n  \n  // Pattern 3: \"| 1 | Player Name |\" format (require real names)\n  if (!playerMatch) {\n    playerMatch = line.match(/\\|\\s*(\\d{1,2})\\s*\\|\\s*([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)+)\\s*\\|/);\n  }\n  \n  // Pattern 4: Simple \"1. Player Name\" or \"1 Player Name\"\n  if (!playerMatch) {\n    playerMatch = line.match(/(\\d{1,2})[\\s\\.\\-]+([A-Z][a-z]+\\s+[A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)/);\n  }\n  \n  // Pattern 5: Any line with number followed by name (last resort)\n  if (!playerMatch) {\n    playerMatch = line.match(/(\\d{1,2})\\s*[:|\\-\\.]?\\s*([A-Z][a-z]{2,}\\s+[A-Z][a-z]{2,})/);\n  }\n  \n  if (playerMatch) {\n    const jerseyNumber = parseInt(playerMatch[1]);\n    const playerName = playerMatch[2] ? playerMatch[2].trim() : '';\n    \n    // Only add if we have a valid name\n    if (playerName && playerName.length > 2 && !playerName.match(/^[\\s|]+$/)) {\n      console.log(`Found player: #${jerseyNumber} - ${playerName}`);\n      players.push({\n        player_id: `harding_2024_player_${jerseyNumber}`,\n        school_id: 'Harding',\n        season_id: '2024',\n        jersey_number: jerseyNumber,\n        name: playerName,\n        position: jerseyNumber === 1 ? 'Goalkeeper' : 'Field Player',\n        is_goalkeeper: jerseyNumber === 1,\n        class_year: null,\n        hometown: null\n      });\n    }\n  }\n  \n  // Parse game results from the Game Results table\n  // Pattern: \"| 09/05/24 | UNION (TN) | | [1-3]...\"\n  const gameMatch = line.match(/\\|\\s*(\\d{2}\\/\\d{2}\\/\\d{2})\\s*\\|\\s*([^|]+?)\\s*\\|.*?\\[(\\d+)-(\\d+)\\]/);\n  if (gameMatch) {\n    const dateStr = gameMatch[1].trim();\n    const opponent = gameMatch[2].trim();\n    const hardingScore = parseInt(gameMatch[3]);\n    const opponentScore = parseInt(gameMatch[4]);\n    \n    // Determine home/away from opponent name\n    const isAway = opponent.toLowerCase().includes('at ');\n    const cleanOpponent = opponent.replace(/^at\\s+/i, '').trim();\n    \n    const gameIndex = games.length + 1;\n    games.push({\n      game_id: `harding_2024_game_${String(gameIndex).padStart(3, '0')}`,\n      school_id: 'Harding',\n      season_id: '2024',\n      date: formatDate(dateStr),\n      opponent: cleanOpponent,\n      home_score: isAway ? opponentScore : hardingScore,\n      away_score: isAway ? hardingScore : opponentScore,\n      location: isAway ? 'Away' : 'Home'\n    });\n  }\n});\n\n// Format date helper function\nfunction formatDate(dateStr) {\n  try {\n    const parts = dateStr.split('/');\n    if (parts.length === 3) {\n      const month = parts[0].padStart(2, '0');\n      const day = parts[1].padStart(2, '0');\n      let year = parts[2];\n      if (year.length === 2) {\n        year = '20' + year;\n      }\n      return `${year}-${month}-${day}`;\n    }\n  } catch (e) {\n    console.log('Date formatting error:', e);\n  }\n  return dateStr;\n}\n\n// Create extraction log entry\nconst extractionLog = {\n  school: 'Harding',\n  season: '2024',\n  extracted_at: new Date().toISOString(),\n  total_players: players.length,\n  total_games: games.length,\n  total_stats: playerGameStats.length,\n  extraction_successful: true,\n  raw_data: JSON.stringify({\n    players: players,\n    games: games,\n    metadata: metadata\n  })\n};\n\n// Remove duplicates from players array\nconst uniquePlayers = [];\nconst seenPlayerIds = new Set();\nplayers.forEach(player => {\n  if (!seenPlayerIds.has(player.player_id)) {\n    seenPlayerIds.add(player.player_id);\n    uniquePlayers.push(player);\n  }\n});\n\n// Remove duplicates from games array\nconst uniqueGames = [];\nconst seenGameIds = new Set();\ngames.forEach(game => {\n  if (!seenGameIds.has(game.game_id)) {\n    seenGameIds.add(game.game_id);\n    uniqueGames.push(game);\n  }\n});\n\nconsole.log(`Deduplicated: ${players.length} -> ${uniquePlayers.length} players, ${games.length} -> ${uniqueGames.length} games`);\n\n// Return all data for database insertion\nreturn {\n  status: 'EXTRACTION_SUCCESS',\n  timestamp: new Date().toISOString(),\n  extraction_log: extractionLog,\n  players: uniquePlayers,\n  games: uniqueGames,\n  summary: {\n    players_extracted: uniquePlayers.length,\n    games_extracted: uniqueGames.length,\n    source_url: metadata.sourceURL,\n    extraction_method: 'Firecrawl v0 + AI parsing'\n  }\n};"
      },
      "id": "process-extraction-v3",
      "name": "Process Extraction",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [880, 220]
    },
    {
      "parameters": {
        "url": "https://edthdopntorkjqgctfkb.supabase.co/rest/v1/soccer_extraction_log",
        "method": "POST",
        "sendBody": true,
        "sendHeaders": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "school",
              "value": "={{ $json.extraction_log.school }}"
            },
            {
              "name": "season", 
              "value": "={{ $json.extraction_log.season }}"
            },
            {
              "name": "extracted_at",
              "value": "={{ $json.extraction_log.extracted_at }}"
            },
            {
              "name": "total_players",
              "value": "={{ $json.extraction_log.total_players }}"
            },
            {
              "name": "total_games", 
              "value": "={{ $json.extraction_log.total_games }}"
            },
            {
              "name": "total_stats",
              "value": "={{ $json.extraction_log.total_stats }}"
            },
            {
              "name": "extraction_successful",
              "value": "={{ $json.extraction_log.extraction_successful }}"
            },
            {
              "name": "raw_data",
              "value": "={{ $json.extraction_log.raw_data }}"
            }
          ]
        },
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVkdGhkb3BudG9ya2pxZ2N0ZmtiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAwMTkxNzUsImV4cCI6MjA2NTU5NTE3NX0.oNzhwpe3AsPyx2ovdZbCTtCHzfBPJ2bnKk7F4efoSMM"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVkdGhkb3BudG9ya2pxZ2N0ZmtiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAwMTkxNzUsImV4cCI6MjA2NTU5NTE3NX0.oNzhwpe3AsPyx2ovdZbCTtCHzfBPJ2bnKk7F4efoSMM"
            },
            {
              "name": "Prefer",
              "value": "return=representation,resolution=merge-duplicates"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "log-to-supabase-v3",
      "name": "Log to Supabase",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1080, 220]
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Create separate items for bulk inserts\nconst extractionData = $('Process Extraction').first().json;\nconst players = extractionData.players || [];\nconst games = extractionData.games || [];\nconst playerGameStats = extractionData.playerGameStats || [];\n\n// Return array of insert operations - each as separate n8n item\nconst operations = [];\n\nif (players.length > 0) {\n  // Filter out invalid players (jersey number must be 1-99, name must exist)\n  const validPlayers = players.filter(p => \n    p.jersey_number >= 1 && \n    p.jersey_number <= 99 && \n    p.name && \n    p.name.trim().length > 1\n  );\n  \n  console.log(`Filtered players: ${players.length} -> ${validPlayers.length} valid`);\n  \n  if (validPlayers.length > 0) {\n    operations.push({\n      json: {\n        table: 'players',\n        data: validPlayers,\n        count: validPlayers.length\n      }\n    });\n  }\n}\n\nif (games.length > 0) {\n  operations.push({\n    json: {\n      table: 'games',\n      data: games, \n      count: games.length\n    }\n  });\n}\n\nif (playerGameStats.length > 0) {\n  operations.push({\n    json: {\n      table: 'player_game_stats',\n      data: playerGameStats,\n      count: playerGameStats.length\n    }\n  });\n}\n\nreturn operations;"
      },
      "id": "prepare-bulk-inserts-v3",
      "name": "Prepare Bulk Inserts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1280, 220]
    },
    {
      "parameters": {
        "url": "=https://edthdopntorkjqgctfkb.supabase.co/rest/v1/{{ $json.table }}",
        "method": "POST",
        "sendBody": true,
        "sendHeaders": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.data) }}",
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVkdGhkb3BudG9ya2pxZ2N0ZmtiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAwMTkxNzUsImV4cCI6MjA2NTU5NTE3NX0.oNzhwpe3AsPyx2ovdZbCTtCHzfBPJ2bnKk7F4efoSMM"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVkdGhkb3BudG9ya2pxZ2N0ZmtiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAwMTkxNzUsImV4cCI6MjA2NTU5NTE3NX0.oNzhwpe3AsPyx2ovdZbCTtCHzfBPJ2bnKk7F4efoSMM"
            },
            {
              "name": "Prefer",
              "value": "return=representation,resolution=merge-duplicates"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "bulk-insert-data-v3",
      "name": "Bulk Insert Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1480, 220]
    },
    {
      "parameters": {
        "jsCode": "// V3 Pipeline Success Summary\nconst logResult = $('Log to Supabase').first().json;\nconst extractionData = $('Process Extraction').first().json;\nconst bulkInserts = $input.all();\n\n// Count successful inserts\nlet playersInserted = 0;\nlet gamesInserted = 0;\n\nbulkInserts.forEach(item => {\n  if (Array.isArray(item.json) && item.json.length > 0) {\n    const firstRecord = item.json[0];\n    if (firstRecord.player_id) {\n      playersInserted = item.json.length;\n    } else if (firstRecord.game_id) {\n      gamesInserted = item.json.length;\n    }\n  }\n});\n\nconst summary = {\n  status: 'V3 PIPELINE SUCCESS ✅',\n  timestamp: new Date().toISOString(),\n  \n  // Extraction Results\n  extraction_results: {\n    school: 'Harding University',\n    season: '2024',\n    sport: 'Men\\'s Soccer',\n    extraction_method: 'Firecrawl v0 + AI parsing',\n    source_url: extractionData.summary.source_url,\n    players_extracted: extractionData.summary.players_extracted,\n    games_extracted: extractionData.summary.games_extracted\n  },\n  \n  // Database Storage Results\n  database_results: {\n    extraction_log_id: logResult.id,\n    players_stored: playersInserted,\n    games_stored: gamesInserted,\n    total_records: playersInserted + gamesInserted + 1 // +1 for log entry\n  },\n  \n  // V3 Architecture Benefits\n  v3_advantages: {\n    'AI-Powered Extraction': '✅ Zero CSS selectors, adapts to changes',\n    'Single API Call': '✅ Replaced 20+ HTTP requests with 1 Firecrawl call',\n    'Database Storage': '✅ Real-time queryable PostgreSQL data',\n    'Maintenance-Free': '✅ No brittle parsing code to maintain',\n    'Scalable': '✅ Ready for all GAC schools',\n    'Cost Effective': '✅ <$60/month for complete solution'\n  },\n  \n  // Next Steps\n  next_steps: {\n    'Query Data': 'Use Supabase dashboard or SQL to analyze',\n    'Scale Up': 'Add other GAC schools to extraction',\n    'Analytics': 'Build dashboards with extracted data',\n    'Real-time': 'Schedule regular extractions'\n  }\n};\n\nconsole.log('🚀 V3 Soccer Analytics Pipeline Complete!');\nconsole.log('📊 Extraction:', extractionData.summary);\nconsole.log('💾 Database:', summary.database_results);\nconsole.log('✨ V3 Benefits:', summary.v3_advantages);\n\nreturn summary;"
      },
      "id": "pipeline-success-v3",
      "name": "Pipeline Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1680, 220]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "name": "status",
              "type": "string",
              "value": "SCRAPE_FAILED ❌"
            },
            {
              "name": "error_message",
              "type": "string",
              "value": "Firecrawl scraping failed. Unable to extract soccer data."
            },
            {
              "name": "timestamp",
              "type": "string",
              "value": "={{ new Date().toISOString() }}"
            },
            {
              "name": "troubleshooting",
              "type": "string",
              "value": "Check: 1) Firecrawl API key, 2) URL accessibility, 3) Website structure changes"
            },
            {
              "name": "raw_response",
              "type": "string",
              "value": "={{ JSON.stringify($json, null, 2) }}"
            }
          ]
        }
      },
      "id": "scrape-error-v3",
      "name": "Scrape Error",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [880, 380]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Firecrawl Scrape",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Firecrawl Scrape": {
      "main": [
        [
          {
            "node": "Scrape Success?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Success?": {
      "main": [
        [
          {
            "node": "Process Extraction",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Scrape Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Extraction": {
      "main": [
        [
          {
            "node": "Log to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to Supabase": {
      "main": [
        [
          {
            "node": "Prepare Bulk Inserts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Bulk Inserts": {
      "main": [
        [
          {
            "node": "Bulk Insert Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bulk Insert Data": {
      "main": [
        [
          {
            "node": "Pipeline Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "active": false,
  "pinData": {},
  "staticData": null,
  "tags": [],
  "triggerCount": 0
}